# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type MovieCount {
  reviews: Int!
}

type Movie {
  id: ID!
  movieName: String!
  description: String!
  director: String!
  releaseDate: DateTime!
  reviews: [Review!]
  _count: MovieCount!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Review {
  id: ID!
  movieId: Int!
  userId: Int!
  rating: Int!
  comment: String!
  movie: Movie!
  user: User!
}

type UserCount {
  reviews: Int!
}

type User {
  id: ID!
  userName: String!
  email: String!
  password: String!
  reviews: [Review!]
  _count: UserCount!
}

type Query {
  movies(where: MovieWhereInput, orderBy: [MovieOrderByWithRelationInput!], page: Int = 1, limit: Int = 10): [Movie!]!
  movie(query: MovieWhereUniqueInput!): Movie!
  findReviewsForMovie(where: ReviewWhereInput, orderBy: [ReviewOrderByWithRelationInput!], skip: Int, page: Int = 1, limit: Int = 10): [Review!]!
}

input MovieWhereInput {
  AND: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  NOT: [MovieWhereInput!]
  id: IntFilter
  movieName: StringFilter
  description: StringFilter
  director: StringFilter
  releaseDate: DateTimeFilter
  reviews: ReviewListRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input ReviewListRelationFilter {
  every: ReviewWhereInput
  some: ReviewWhereInput
  none: ReviewWhereInput
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: IntFilter
  movieId: IntFilter
  userId: IntFilter
  rating: IntFilter
  comment: StringFilter
  movie: MovieRelationFilter
  user: UserRelationFilter
}

input MovieRelationFilter {
  is: MovieWhereInput
  isNot: MovieWhereInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IntFilter
  userName: StringFilter
  email: StringFilter
  password: StringFilter
  reviews: ReviewListRelationFilter
}

input MovieOrderByWithRelationInput {
  id: SortOrder
  movieName: SortOrder
  description: SortOrder
  director: SortOrder
  releaseDate: SortOrder
  reviews: ReviewOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input ReviewOrderByRelationAggregateInput {
  _count: SortOrder
}

input MovieWhereUniqueInput {
  id: Int
  movieName: String
}

input ReviewOrderByWithRelationInput {
  id: SortOrder
  movieId: SortOrder
  userId: SortOrder
  rating: SortOrder
  comment: SortOrder
  movie: MovieOrderByWithRelationInput
  user: UserOrderByWithRelationInput
}

input UserOrderByWithRelationInput {
  id: SortOrder
  userName: SortOrder
  email: SortOrder
  password: SortOrder
  reviews: ReviewOrderByRelationAggregateInput
}

type Mutation {
  createUser(user: UserCreateInput!): String!
  loginUser(user: LoginUserInput!): String!
  updateUser(where: UserWhereUniqueInput!, user: UserUpdateInput!): User!
  createMovie(movie: MovieCreateInput!): Movie!
  updateMovie(searchInput: MovieWhereUniqueInput!, movie: MovieUpdateInput!): Movie!
  deleteMovie(query: MovieWhereUniqueInput!): Movie!
  createReview(review: ReviewCreateInput!): Review!
  updateReview(where: ReviewWhereUniqueInput!, review: ReviewUpdateInput!): Review!
  deleteReview(where: ReviewWhereUniqueInput!): Review!
}

input UserCreateInput {
  userName: String!
  email: String!
  password: String!
  reviews: ReviewCreateNestedManyWithoutUserInput
}

input ReviewCreateNestedManyWithoutUserInput {
  create: [ReviewCreateWithoutUserInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutUserInput!]
  createMany: ReviewCreateManyUserInputEnvelope
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutUserInput {
  rating: Int!
  comment: String!
  movie: MovieCreateNestedOneWithoutReviewsInput!
}

input MovieCreateNestedOneWithoutReviewsInput {
  create: MovieCreateWithoutReviewsInput
  connectOrCreate: MovieCreateOrConnectWithoutReviewsInput
  connect: MovieWhereUniqueInput
}

input MovieCreateWithoutReviewsInput {
  movieName: String!
  description: String!
  director: String!
  releaseDate: DateTime!
}

input MovieCreateOrConnectWithoutReviewsInput {
  where: MovieWhereUniqueInput!
  create: MovieCreateWithoutReviewsInput!
}

input ReviewCreateOrConnectWithoutUserInput {
  where: ReviewWhereUniqueInput!
  create: ReviewCreateWithoutUserInput!
}

input ReviewWhereUniqueInput {
  id: Int
}

input ReviewCreateManyUserInputEnvelope {
  data: [ReviewCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ReviewCreateManyUserInput {
  id: Int
  movieId: Int!
  rating: Int!
  comment: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input UserWhereUniqueInput {
  id: Int
  email: String
}

input UserUpdateInput {
  userName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input ReviewUpdateManyWithoutUserNestedInput {
  create: [ReviewCreateWithoutUserInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutUserInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutUserInput!]
  createMany: ReviewCreateManyUserInputEnvelope
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  connect: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReviewUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [ReviewScalarWhereInput!]
}

input ReviewUpsertWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutUserInput!
  create: ReviewCreateWithoutUserInput!
}

input ReviewUpdateWithoutUserInput {
  rating: IntFieldUpdateOperationsInput
  comment: StringFieldUpdateOperationsInput
  movie: MovieUpdateOneRequiredWithoutReviewsNestedInput
}

input IntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input MovieUpdateOneRequiredWithoutReviewsNestedInput {
  create: MovieCreateWithoutReviewsInput
  connectOrCreate: MovieCreateOrConnectWithoutReviewsInput
  upsert: MovieUpsertWithoutReviewsInput
  connect: MovieWhereUniqueInput
  update: MovieUpdateWithoutReviewsInput
}

input MovieUpsertWithoutReviewsInput {
  update: MovieUpdateWithoutReviewsInput!
  create: MovieCreateWithoutReviewsInput!
}

input MovieUpdateWithoutReviewsInput {
  movieName: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  director: StringFieldUpdateOperationsInput
  releaseDate: DateTimeFieldUpdateOperationsInput
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input ReviewUpdateWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutUserInput!
}

input ReviewUpdateManyWithWhereWithoutUserInput {
  where: ReviewScalarWhereInput!
  data: ReviewUpdateManyMutationInput!
}

input ReviewScalarWhereInput {
  AND: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  NOT: [ReviewScalarWhereInput!]
  id: IntFilter
  movieId: IntFilter
  userId: IntFilter
  rating: IntFilter
  comment: StringFilter
}

input ReviewUpdateManyMutationInput {
  rating: IntFieldUpdateOperationsInput
  comment: StringFieldUpdateOperationsInput
}

input MovieCreateInput {
  movieName: String!
  description: String!
  director: String!
  releaseDate: DateTime!
  reviews: ReviewCreateNestedManyWithoutMovieInput
}

input ReviewCreateNestedManyWithoutMovieInput {
  create: [ReviewCreateWithoutMovieInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutMovieInput!]
  createMany: ReviewCreateManyMovieInputEnvelope
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutMovieInput {
  rating: Int!
  comment: String!
  user: UserCreateNestedOneWithoutReviewsInput!
}

input UserCreateNestedOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connectOrCreate: UserCreateOrConnectWithoutReviewsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutReviewsInput {
  userName: String!
  email: String!
  password: String!
}

input UserCreateOrConnectWithoutReviewsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutReviewsInput!
}

input ReviewCreateOrConnectWithoutMovieInput {
  where: ReviewWhereUniqueInput!
  create: ReviewCreateWithoutMovieInput!
}

input ReviewCreateManyMovieInputEnvelope {
  data: [ReviewCreateManyMovieInput!]!
  skipDuplicates: Boolean
}

input ReviewCreateManyMovieInput {
  id: Int
  userId: Int!
  rating: Int!
  comment: String!
}

input MovieUpdateInput {
  description: StringFieldUpdateOperationsInput
  director: StringFieldUpdateOperationsInput
  releaseDate: DateTimeFieldUpdateOperationsInput
  reviews: ReviewUpdateManyWithoutMovieNestedInput
}

input ReviewUpdateManyWithoutMovieNestedInput {
  create: [ReviewCreateWithoutMovieInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutMovieInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutMovieInput!]
  createMany: ReviewCreateManyMovieInputEnvelope
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  connect: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutMovieInput!]
  updateMany: [ReviewUpdateManyWithWhereWithoutMovieInput!]
  deleteMany: [ReviewScalarWhereInput!]
}

input ReviewUpsertWithWhereUniqueWithoutMovieInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutMovieInput!
  create: ReviewCreateWithoutMovieInput!
}

input ReviewUpdateWithoutMovieInput {
  rating: IntFieldUpdateOperationsInput
  comment: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReviewsNestedInput
}

input UserUpdateOneRequiredWithoutReviewsNestedInput {
  create: UserCreateWithoutReviewsInput
  connectOrCreate: UserCreateOrConnectWithoutReviewsInput
  upsert: UserUpsertWithoutReviewsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutReviewsInput
}

input UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsInput!
  create: UserCreateWithoutReviewsInput!
}

input UserUpdateWithoutReviewsInput {
  userName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input ReviewUpdateWithWhereUniqueWithoutMovieInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutMovieInput!
}

input ReviewUpdateManyWithWhereWithoutMovieInput {
  where: ReviewScalarWhereInput!
  data: ReviewUpdateManyMutationInput!
}

input ReviewCreateInput {
  rating: Int!
  comment: String!
  movie: MovieCreateNestedOneWithoutReviewsInput!
  user: UserCreateNestedOneWithoutReviewsInput!
}

input ReviewUpdateInput {
  rating: IntFieldUpdateOperationsInput
  comment: StringFieldUpdateOperationsInput
  movie: MovieUpdateOneRequiredWithoutReviewsNestedInput
  user: UserUpdateOneRequiredWithoutReviewsNestedInput
}